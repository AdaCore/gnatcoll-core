------------------------------------------------------------------------------
--                             G N A T C O L L                              --
--                                                                          --
--                    Copyright (C) 2015-2020, AdaCore                      --
--                                                                          --
-- This library is free software;  you can redistribute it and/or modify it --
-- under terms of the  GNU General Public License  as published by the Free --
-- Software  Foundation;  either version 3,  or (at your  option) any later --
-- version. This library is distributed in the hope that it will be useful, --
-- but WITHOUT ANY WARRANTY;  without even the implied warranty of MERCHAN- --
-- TABILITY or FITNESS FOR A PARTICULAR PURPOSE.                            --
--                                                                          --
-- As a special exception under Section 7 of GPL version 3, you are granted --
-- additional permissions described in the GCC Runtime Library Exception,   --
-- version 3.1, as published by the Free Software Foundation.               --
--                                                                          --
-- You should have received a copy of the GNU General Public License and    --
-- a copy of the GCC Runtime Library Exception along with this program;     --
-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
-- <http://www.gnu.org/licenses/>.                                          --
--                                                                          --
------------------------------------------------------------------------------

with "gpr";

project GnatColl is

   Version := External ("GNATCOLL_VERSION", "0.0");
   Name    := "gnatcoll";

   type Yes_No is ("yes", "no");
   Mmap      : Yes_No := External ("GNATCOLL_MMAP", "yes");
   Madvise   : Yes_No := External ("GNATCOLL_MADVISE", "yes");

   type Build_Type is ("DEBUG", "PROD");
   Build : Build_Type :=
      External ("GNATCOLL_BUILD_MODE", External ("BUILD", "DEBUG"));

   type Library_Type_Type is ("relocatable", "static", "static-pic");
   Library_Type : Library_Type_Type := External ("LIBRARY_TYPE", "static");

   type OS_Kind is ("windows", "unix", "osx");
   OS : OS_Kind := External ("GNATCOLL_OS", "unix");

   Sources := ("src", "src/os", "src/paragraph_filling");

   case OS is
      when "unix" | "osx" =>
         Sources := Sources & ("src/os/unix");
      when "windows" =>
         Sources := Sources & ("src/os/win32");
   end case;

   for Source_Dirs use Sources;

   for Library_Kind use Library_Type;

   case OS is
      when "windows" | "osx" =>
         --  On MacOS and Windows all object are relocatable by default
         --  thus the same object directory can be used
         for Object_Dir use "obj/gnatcoll/all";
      when "unix" =>
         --  On Unix static-pic and relocatable shared the same objects
         case Library_Type is
            when "relocatable" | "static-pic" =>
               for Object_Dir use "obj/gnatcoll/pic";
            when "static" =>
               for Object_Dir use "obj/gnatcoll/static";
         end case;
   end case;

   for Library_Dir
      use "lib/gnatcoll/" & Project'Library_Kind;
   for Library_Name    use Name;

   for Languages use ("Ada", "C");

   Extra_Switches := ();
   Extra_Libs := ();
   case OS is
      when "windows" =>
         Extra_Libs := ("-lpsapi", "-lntdll");   --  For gnatcoll.memory
      when others =>
         case Mmap is
            when "yes" =>
               Extra_Switches := Extra_Switches & ("-DHAVE_MMAP");
               case Madvise is
                  when "yes" =>
                     Extra_Switches := Extra_Switches & ("-DHAVE_MADVISE");
                  when "no" =>
                     null;
               end case;
            when others =>
               null;
         end case;
   end case;
   case OS is
      when "unix" =>
         Extra_Libs := Extra_Libs & ("-ldl"); --  For gnatcoll.plugins
      when others =>
         null;
   end case;

   So_Ext := "";
   case OS is
      when "windows" =>
         So_Ext := ".dll";
      when "osx" =>
         So_Ext := ".dylib";
      when others =>
         So_Ext := ".so";
   end case;

   for Library_Version use "lib" & Name & So_Ext & "." & Version;

   case Library_Type is
      when "relocatable" =>
         for Library_Options use Extra_Libs;

         --  Put user options in front, for options like --as-needed.
         for Leading_Library_Options use External_As_List ("LDFLAGS", " ");

      when others =>
         null;
   end case;

   package Compiler is
      case Build is
         when "DEBUG" =>
            for Switches ("Ada") use
              ("-g", "-O0", "-gnata", "-gnatVa", "-gnatQ", "-gnaty", "-gnateE",
               "-gnatwaCJe", "-fstack-check");
            for Switches ("C") use ("-g", "-Wunreachable-code");

         when "PROD" =>
            --  Do not use -gnatwe for production mode
            for Switches ("Ada") use ("-O2", "-gnatn", "-gnatwaCJ");
            for Switches ("C") use ("-O2", "-Wunreachable-code");
      end case;

      --  Give user flags the last word.
      for Switches ("Ada") use Compiler'Switches ("Ada")
        & External_As_List ("ADAFLAGS", " ");
      for Switches ("C") use Compiler'Switches ("C")
        & External_As_List ("CFLAGS", " ")
        & External_As_List ("CPPFLAGS", " ");

      for Switches ("gnatcoll_support.c") use
        Extra_Switches & Compiler'Switches ("C");
   end Compiler;

   package Binder is
      case Build is
         when "DEBUG" =>
            for Switches ("Ada") use ("-E");
         when "PROD" =>
            null;
      end case;
   end Binder;

   package Builder is
      case Build is
         when "DEBUG" =>
            for Global_Configuration_Pragmas use "gnat_debug.adc";
         when "PROD" =>
            null;
      end case;
   end Builder;

   package Ide is
      for VCS_Kind use "Git";
   end Ide;

   package Naming is

      for Specification  ("GNATCOLL.OS.Constants")
        use "gnatcoll-os-constants__" & OS & ".ads";

      case OS is
         when "unix" | "osx" =>
            for Specification  ("GNATCOLL.Mmap.System")
              use "gnatcoll-mmap-system__unix.ads";
            for Implementation ("GNATCOLL.Mmap.System")
              use "gnatcoll-mmap-system__unix.adb";
            for Implementation ("GNATCOLL.IO.Native.Codec")
              use "gnatcoll-io-native-codec__unix.adb";
            for Implementation ("GNATCOLL.Plugins")
              use "gnatcoll-plugins__unix.adb";
            for Implementation ("GNATCOLL.OS.Stat.Stat")
              use "gnatcoll-os-stat-stat__unix.adb";
            for Implementation ("GNATCOLL.OS.FS.Null_File")
              use "gnatcoll-os-fs-null_file__unix.adb";
            for Implementation ("GNATCOLL.OS.FS.Open")
              use "gnatcoll-os-fs-open__unix.adb";
            for Implementation ("GNATCOLL.OS.FS.Set_Close_On_Exec")
              use "gnatcoll-os-fs-set_close_on_exec__unix.adb";
            for Implementation ("GNATCOLL.OS.FS.Is_Console")
              use "gnatcoll-os-fs-is_console__unix.adb";
            for Implementation ("GNATCOLL.OS.Process.Wait")
              use "gnatcoll-os-process-wait__unix.adb";
            for Implementation ("GNATCOLL.OS.Process.Internal_Spawn")
              use "gnatcoll-os-process-internal_spawn__unix.adb";
            for Specification ("GNATCOLL.OS.Process_Types")
              use "gnatcoll-os-process_types__unix.ads";
            for Implementation ("GNATCOLL.OS.Process_Types")
              use "gnatcoll-os-process_types__unix.adb";
            for Implementation ("GNATCOLL.OS.Process.State")
              use "gnatcoll-os-process-state__unix.adb";
            for Implementation ("GNATCOLL.OS.Process.Wait_For_Processes")
              use "gnatcoll-os-process-wait_for_processes__unix.adb";
            for Specification ("GNATCOLL.OS.Dir_Types")
              use "gnatcoll-os-dir_types__unix.ads";
            for Implementation ("GNATCOLL.OS.Dir.Open")
              use "gnatcoll-os-dir-open__unix.adb";
            for Implementation ("GNATCOLL.OS.Dir.Close")
              use "gnatcoll-os-dir-close__unix.adb";
            for Implementation ("GNATCOLL.OS.Dir.Read")
              use "gnatcoll-os-dir-read__unix.adb";
         when "windows" =>
            for Specification  ("GNATCOLL.Mmap.System")
              use "gnatcoll-mmap-system__win32.ads";
            for Implementation ("GNATCOLL.Mmap.System")
              use "gnatcoll-mmap-system__win32.adb";
            for Implementation ("GNATCOLL.IO.Native.Codec")
              use "gnatcoll-io-native-codec__win32.adb";
            for Implementation ("GNATCOLL.Plugins")
              use "gnatcoll-plugins__windows.adb";
            for Implementation ("GNATCOLL.OS.Stat.Stat")
              use "gnatcoll-os-stat-stat__win32.adb";
            for Implementation ("GNATCOLL.OS.FS.Is_Console")
              use "gnatcoll-os-fs-is_console__win32.adb";
            for Implementation ("GNATCOLL.OS.FS.Null_File")
              use "gnatcoll-os-fs-null_file__win32.adb";
            for Implementation ("GNATCOLL.OS.FS.Open")
              use "gnatcoll-os-fs-open__win32.adb";
            for Implementation ("GNATCOLL.OS.FS.Open_Pipe")
              use "gnatcoll-os-fs-open_pipe__win32.adb";
            for Implementation ("GNATCOLL.OS.FS.Set_Close_On_Exec")
              use "gnatcoll-os-fs-set_close_on_exec__win32.adb";
            for Specification ("GNATCOLL.OS.Process_Types")
              use "gnatcoll-os-process_types__win32.ads";
            for Implementation ("GNATCOLL.OS.Process_Types")
              use "gnatcoll-os-process_types__win32.adb";
            for Implementation ("GNATCOLL.OS.Process.Wait")
              use "gnatcoll-os-process-wait__win32.adb";
            for Implementation ("GNATCOLL.OS.Process.Internal_Spawn")
              use "gnatcoll-os-process-internal_spawn__win32.adb";
            for Implementation ("GNATCOLL.OS.Process.State")
              use "gnatcoll-os-process-state__win32.adb";
            for Implementation ("GNATCOLL.OS.Process.Wait_For_Processes")
              use "gnatcoll-os-process-wait_for_processes__win32.adb";
            for Specification ("GNATCOLL.OS.Dir_Types")
              use "gnatcoll-os-dir_types__win32.ads";
            for Implementation ("GNATCOLL.OS.Dir.Open")
              use "gnatcoll-os-dir-open__win32.adb";
            for Implementation ("GNATCOLL.OS.Dir.Close")
              use "gnatcoll-os-dir-close__win32.adb";
            for Implementation ("GNATCOLL.OS.Dir.Read")
              use "gnatcoll-os-dir-read__win32.adb";
      end case;

      case OS is
         when "unix" =>
            for Specification  ("GNATCOLL.OS.Libc_Constants")
              use "gnatcoll-os-libc_constants__linux.ads";
            for Implementation ("GNATCOLL.OS.FS.Open_Pipe")
              use "gnatcoll-os-fs-open_pipe__linux.adb";
         when "osx" =>
            for Specification  ("GNATCOLL.OS.Libc_Constants")
              use "gnatcoll-os-libc_constants__osx.ads";
            for Implementation ("GNATCOLL.OS.FS.Open_Pipe")
              use "gnatcoll-os-fs-open_pipe__unix.adb";
         when "windows" =>
            null;
      end case;
   end Naming;

   package Linker is
      case Library_Type is
         when "relocatable" =>
            null;
         when "static" | "static-pic" =>
            for Linker_Options use Extra_Libs;
      end case;
   end Linker;

   package Install is
      for Artifacts ("share/examples/gnatcoll") use ("examples/*");
      for Artifacts ("share/doc/gnatcoll/html") use ("docs/_build/html");
      for Artifacts ("share/doc/gnatcoll")
        use ("docs/_build/latex/GNATColl.pdf");
   end Install;

end GnatColl;
