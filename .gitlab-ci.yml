workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: always
    - if: $CI_PIPELINE_SOURCE == "web"
      when: always
    - when: never

variables:
   ANOD_DEFAULT_SANDBOX_DIR: /it/wave
   HOST: x86_64-linux

stages:
  - build

default:
  before_script: |
    echo "before script executing..."

    #######################
    ## colored execution ##
    #######################

    exec() {
       # dark green + $ + command line + grey
       echo -e "\e[0;32m\$ $@\e[0;37m"
       $@
       # save the result
       res=$?
       # back to normal output
       echo -e -n "\e[0m"
       # make sure we translate the exit code
       return $res
    }

    # Enable generic CI for building with Anod

    cmd="generic_anod_ci"

    # generic anod ci requires --continuous-builder-mode when not run in a
    # MR context
    if [[ $CI_PIPELINE_SOURCE != "merge_request_event" ]]; then
      cmd="$cmd --continuous-builder-mode"
    fi

    exec eval $cmd
    echo "sourcing the generic CI environment"
    . /tmp/ci_env.sh

    # generic_anod_ci modifies the rebuild strategy of anod.
    # Set it back to full, so we do not rebuild the packages depending
    # on gnatcoll-core and contained in GNAT.
    exec anod tune --full
    exec anod vcs --list

################
# JOB TEMPLATE #
################

.job_template:
  services:
    - image:e3
    - cpu:4
  interruptible: true

########
# JOBS #
########

build_doc:
  services:
    - image:e3
    - cpu:2
  stage: build
  script:
    - anod vcs --add-repo gnatcoll-core $CI_PROJECT_DIR
    - anod build --latest gnatcoll-core-doc

build-windows:
  services:
    - image:e3-wine
    - cpu:4
  stage: build
  script:
    - anod install --latest gnat --target=x86_64-windows64
    - anod install --latest gcc
    - export GNAT_DIR=$ANOD_DEFAULT_SANDBOX_DIR/x86_64-windows64-linux64/gnat/install
    - export PATH=$GNAT_DIR/bin:$ANOD_DEFAULT_SANDBOX_DIR/x86_64-linux/gcc/install/bin:$PATH
    - export GPR_PROJECT_PATH=$GNAT_DIR/x86_64-w64-mingw32/share/gpr
    - cd $CI_PROJECT_DIR && make TARGET=x86_64-w64-mingw32 && make install prefix=install TARGET=x86_64-w64-mingw32 || exit 1
    - export GPR_PROJECT_PATH=$CI_PROJECT_DIR/install/share/gpr:$GPR_PROJECT_PATH
    - cd $CI_PROJECT_DIR/testsuite && ./run-tests --target=x86_64-windows64,,wine || true
    - e3-testsuite-report
        --failure-exit-code 1
        --xunit-output $CI_PROJECT_DIR/test.xml
        --xunit-name gnatcoll-core
        $CI_PROJECT_DIR/testsuite/out/new/ || FAILED=true

    # We previously prevented the pipeline from halting if a test failed, to make
    # sure all tests were run. If a test failed now we exit with a non-zero code
    - if [ "$FAILED" = "true" ]; then echo "There was at least one testcase failure" && exit 1; fi
  allow_failure: true
  artifacts:
    when:
      always
    paths:
      - test.xml
    reports:
      junit: test.xml

build_and_test_aarch64_linux:
  services:
    - image:e3-aarch64-linux
    - cpu:4
    - platform:aarch64-linux
  stage: build
  script:
    - anod vcs --add-repo gnatcoll-core $CI_PROJECT_DIR
    - anod build --latest gnatcoll-core
    - anod test --latest gnatcoll-core -Qexternal
    - e3-testsuite-report
        --failure-exit-code 1
        --xunit-output $CI_PROJECT_DIR/test.xml
        --xunit-name gnatcoll-core
        $ANOD_DEFAULT_SANDBOX_DIR/aarch64-linux/gnatcoll-core_external_test/results/new/ || FAILED=true

    # We previously prevented the pipeline from halting if a test failed, to make
    # sure all tests were run. If a test failed now we exit with a non-zero code
    - if [ "$FAILED" = "true" ]; then echo "There was at least one testcase failure" && exit 1; fi
  allow_failure: true
  artifacts:
    when:
      always
    paths:
      - test.xml
    reports:
      junit: test.xml

build_debug_mode_x86_64_linux:
  extends: .job_template
  stage: build
  script:
    - anod vcs --add-repo gnatcoll-core $CI_PROJECT_DIR
    - anod build --latest gnatcoll-core -Qdbg

build_and_test_x86_linux:
  extends: .job_template
  stage: build
  script:
    - cp /it/e3/lib/python3.11/site-packages/e3/os/data/rlimit-x86_64-linux /it/e3/lib/python3.11/site-packages/e3/os/data/rlimit-x86-linux
    - anod vcs --add-repo gnatcoll-core $CI_PROJECT_DIR
    - anod build --latest --build=x86-linux gnatcoll-core
    - anod test --latest --build=x86-linux gnatcoll-core -Qexternal
    - e3-testsuite-report
        --failure-exit-code 1
        --xunit-output $CI_PROJECT_DIR/test.xml
        --xunit-name gnatcoll-core
        $ANOD_DEFAULT_SANDBOX_DIR/x86-linux/gnatcoll-core_external_test/results/new/ || FAILED=true

    # We previously prevented the pipeline from halting if a test failed, to make
    # sure all tests were run. If a test failed now we exit with a non-zero code
    - if [ "$FAILED" = "true" ]; then echo "There was at least one testcase failure" && exit 1; fi
  artifacts:
    when:
      always
    paths:
      - test.xml
    reports:
      junit: test.xml

build_and_test_x86_64_linux:
  extends: .job_template
  stage: build
  script:
    - anod vcs --add-repo gnatcoll-core $CI_PROJECT_DIR
    - anod build --latest gnatcoll-core
    - anod test --latest gnatcoll-core -Qexternal
    - e3-testsuite-report
        --failure-exit-code 1
        --xunit-output $CI_PROJECT_DIR/test.xml
        --xunit-name gnatcoll-core
        $ANOD_DEFAULT_SANDBOX_DIR/$HOST/gnatcoll-core_external_test/results/new/ || FAILED=true

    # We previously prevented the pipeline from halting if a test failed, to make
    # sure all tests were run. If a test failed now we exit with a non-zero code
    - if [ "$FAILED" = "true" ]; then echo "There was at least one testcase failure" && exit 1; fi
  artifacts:
    when:
      always
    paths:
      - test.xml
    reports:
      junit: test.xml

build_and_test_coverage:
  extends: .job_template
  stage: build
  script:
    - anybadge -l Coverage -v "Under Construction" -f coverage.svg -c steelblue
    - anybadge -l "Tests Passing" -v "Error" -f test-count.svg -c red

    - anod vcs --add-repo gnatcoll-core $CI_PROJECT_DIR
    - anod build --latest gnatcoll-core -Qcoverage
    - anod test  --latest gnatcoll-core -Qcoverage

    - e3-testsuite-report
        --failure-exit-code 1
        --xunit-output $CI_PROJECT_DIR/test-coverage.xml
        --xunit-name gnatcoll-core
        $ANOD_DEFAULT_SANDBOX_DIR/$HOST/gnatcoll-core_coverage_test/results/new/ || FAILED=true

    # Create test count badge
    - cd $CI_PROJECT_DIR
    - rm test-count.svg  # remove placeholder error badge
    - create_xunit_badge --xunit_reports test-coverage.xml

    # Move coverage reports and log coverage summaries
    - mkdir $CI_PROJECT_DIR/coverage
    - mv $ANOD_DEFAULT_SANDBOX_DIR/$HOST/gnatcoll-core_coverage_test/results/new/coverage-xml $CI_PROJECT_DIR/coverage/xml
    - mv $ANOD_DEFAULT_SANDBOX_DIR/$HOST/gnatcoll-core_coverage_test/results/new/coverage-dhtml $CI_PROJECT_DIR/coverage/dhtml
    - mv $ANOD_DEFAULT_SANDBOX_DIR/$HOST/gnatcoll-core_coverage_test/results/new/coverage-cobertura $CI_PROJECT_DIR/coverage/cobertura
    - echo_coverage_stats --coverage-file $CI_PROJECT_DIR/coverage/xml/index.xml

    # We previously prevented the pipeline from halting if a test failed, to make
    # sure all tests were run. If a test failed now we exit with a non-zero code
    - if [ ! -z ${FAILED+x} ]; then echo "There was at least one testcase failure" && exit 1; fi
  coverage: '/^Stmt Coverage:\s+(\d+\.\d+\%) \(\d+ \/ \d+\)$/'
  allow_failure: true
  artifacts:
    when:
      always
    paths:
      - $PACKAGE
      - test-coverage.xml
      - coverage.svg
      - test-count.svg
      - coverage/xml
      - coverage/dhtml
      - coverage/cobertura
    reports:
      junit: test-coverage.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura/cobertura.xml

  interruptible: true
