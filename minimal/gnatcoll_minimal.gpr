------------------------------------------------------------------------------
--                             G N A T C O L L                              --
--                                                                          --
--                    Copyright (C) 2015-2024, AdaCore                      --
--                                                                          --
-- This library is free software;  you can redistribute it and/or modify it --
-- under terms of the  GNU General Public License  as published by the Free --
-- Software  Foundation;  either version 3,  or (at your  option) any later --
-- version. This library is distributed in the hope that it will be useful, --
-- but WITHOUT ANY WARRANTY;  without even the implied warranty of MERCHAN- --
-- TABILITY or FITNESS FOR A PARTICULAR PURPOSE.                            --
--                                                                          --
-- As a special exception under Section 7 of GPL version 3, you are granted --
-- additional permissions described in the GCC Runtime Library Exception,   --
-- version 3.1, as published by the Free Software Foundation.               --
--                                                                          --
-- You should have received a copy of the GNU General Public License and    --
-- a copy of the GCC Runtime Library Exception along with this program;     --
-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
-- <http://www.gnu.org/licenses/>.                                          --
--                                                                          --
------------------------------------------------------------------------------
with "config/gnatcoll_minimal_constants.gpr";

library project GNATCOLL_Minimal is

   Version := External ("GNATCOLL_VERSION",
      GNATCOLL_Minimal_Constants.GNATCOLL_VERSION_DEFAULT);
   Name    := "gnatcoll_minimal";

   type Build_Type is ("DEBUG", "PROD");
   Build : Build_Type :=
      External ("GNATCOLL_BUILD_MODE",
         External ("BUILD",
            GNATCOLL_Minimal_Constants.GNATCOLL_BUILD_MODE_DEFAULT));

   type Library_Type_Type is ("relocatable", "static", "static-pic");
   Library_Type : Library_Type_Type := External ("LIBRARY_TYPE", "static");

   type OS_Kind is ("windows", "unix", "osx");
   OS : OS_Kind := External
      ("GNATCOLL_OS", GNATCOLL_Minimal_Constants.GNATCOLL_OS_DEFAULT);

   for Languages use ("Ada", "C");
   for Source_Dirs use ("src");

   for Library_Kind use Library_Type;

   Read_Only := external ("EXTERNALLY_BUILT", "false");
   for Externally_Built use Read_Only;

   --  If gnatcoll-core is built out of tree, and is used by an external
   --  afterwards, then GNATCOLL_OBJECT_ROOT can be used so gnatcoll.gpr
   --  Object_Dir and Library_Dir point to the correct directory.
   Object_Root := external ("GNATCOLL_OBJECT_ROOT", "");

   case OS is
      when "windows" | "osx" =>
         --  On MacOS and Windows all object are relocatable by default
         --  thus the same object directory can be used
         for Object_Dir use Object_Root & "obj/gnatcoll_minimal/all";
      when "unix" =>
         --  On Unix static-pic and relocatable shared the same objects
         case Library_Type is
            when "relocatable" | "static-pic" =>
               for Object_Dir use Object_Root & "obj/gnatcoll_minimal/pic";
            when "static" =>
               for Object_Dir use Object_Root & "obj/gnatcoll_minimal/static";
         end case;
   end case;

   for Library_Dir
      use Object_Root & "lib/gnatcoll_core/" & Project'Library_Kind;

   for Library_Name    use Name;


   Extra_Switches := ();
   Extra_Libs := ();
   case OS is
      when "windows" =>
         Extra_Libs := ("-lpsapi", "-lntdll");   --  For gnatcoll.memory
      when others =>
         null;
   end case;

   So_Ext := "";
   case OS is
      when "windows" =>
         So_Ext := ".dll";
      when "osx" =>
         So_Ext := ".dylib";
      when others =>
         So_Ext := ".so";
   end case;

   for Library_Version use "lib" & Name & So_Ext & "." & Version;

   case Library_Type is
      when "relocatable" =>
         for Library_Options use Extra_Libs;

         --  Put user options in front, for options like --as-needed.
         for Leading_Library_Options use External_As_List ("LDFLAGS", " ");

      when others =>
         null;
   end case;

   package Compiler is
      case Build is
         when "DEBUG" =>
            for Switches ("Ada") use
              ("-g", "-O0", "-gnata", "-gnatVa", "-gnatQ", "-gnaty", "-gnateE",
               "-gnatwaCJe", "-fstack-check");
            for Switches ("C") use ("-g", "-Wunreachable-code");

         when "PROD" =>
            --  Do not use -gnatwe for production mode
            for Switches ("Ada") use ("-O2", "-gnatn", "-gnatwaCJ");
            for Switches ("C") use ("-O2", "-Wunreachable-code");
      end case;

      --  Give user flags the last word.
      for Switches ("Ada") use Compiler'Switches ("Ada")
        & External_As_List ("ADAFLAGS", " ");
      for Switches ("C") use Compiler'Switches ("C")
        & External_As_List ("CFLAGS", " ")
        & External_As_List ("CPPFLAGS", " ");

      for Switches ("gnatcoll_support.c") use
        Extra_Switches & Compiler'Switches ("C");
   end Compiler;

   package Binder is
      case Build is
         when "DEBUG" =>
            for Switches ("Ada") use ("-E");
         when "PROD" =>
            null;
      end case;
   end Binder;

   package Builder is
      case Build is
         when "DEBUG" =>
            for Global_Configuration_Pragmas use "src/gnat_debug.adc";
         when "PROD" =>
            null;
      end case;
   end Builder;

   package Ide is
      for VCS_Kind use "Git";
   end Ide;

   package Linker is
      case Library_Type is
         when "relocatable" =>
            null;
         when "static" | "static-pic" =>
            for Linker_Options use Extra_Libs;
      end case;
   end Linker;

end GNATCOLL_Minimal;
